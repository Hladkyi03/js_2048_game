{"version":3,"sources":["scripts/main.js"],"names":["TABLE_SIZE","PERCENT_FOR_4","MAIN_START_VALUE","SECONDATY_START_VALUE","VALUE_TO_WIN","movableRow","document","querySelector","cells","querySelectorAll","startButton","scoreBoard","messageStart","messageWin","messageLose","maxScoreBoard","getElementById","gameIsActive","gameState","gameCells","maxScore","localStorage","getItem","textContent","score","clearField","row","cell","MovableCell","remove","col","clearValues","removeAllClassesExceptMain","updateMaxScore","scores","currentMaxScore","parseInt","setItem","startX","startY","x","y","createElement","classList","add","append","style","setProperty","addEventListener","value","movesRemain","currentCell","nextCell","addRandomPlate","emptyCells","push","length","randomCell","Math","floor","random","randomValue","newCell","setValue","gameOver","element","classNameToKeep","Array","from","filter","className","forEach","startGame","contains","gameWinner","mergeCells","row1","col1","row2","col2","setCoordinates","moveUp","isMerged","changes","moveCellsUp","moveCellUp","previousPlate","moveDown","moveCellsDown","moveCellDown","moveRight","moveCellsRight","moveCellRight","moveLeft","moveCellsLeft","moveCellLeft","touchStartHandler","e","touches","clientX","clientY","touchEndHandler","target","preventDefault","endX","changedTouches","endY","deltaX","deltaY","abs","setTimeout","key","change","passive"],"mappings":"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","file":"main.a7e05dcd.js","sourceRoot":"..\\src","sourcesContent":["/* eslint-disable max-len */\n'use strict';\n\nconst TABLE_SIZE = 4;\nconst PERCENT_FOR_4 = 0.1;\nconst MAIN_START_VALUE = 2;\nconst SECONDATY_START_VALUE = 4;\nconst VALUE_TO_WIN = 2048;\n\nconst movableRow = document.querySelector('.field-row-movable');\nconst cells = document.querySelectorAll('.field-cell');\nconst startButton = document.querySelector('.button');\nconst scoreBoard = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst maxScoreBoard = document.getElementById('max-score');\nlet gameIsActive = false;\n\nconst gameState = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nconst gameCells = [\n  [null, null, null, null],\n  [null, null, null, null],\n  [null, null, null, null],\n  [null, null, null, null],\n];\n\nconst maxScore = localStorage.getItem('maxScore') || 0;\n\nmaxScoreBoard.textContent = maxScore;\n\nlet score = 0;\n\nfunction clearField() {\n  for (const row of gameCells) {\n    for (const cell of row) {\n      if (cell instanceof MovableCell) {\n        cell.cell.remove();\n      }\n    }\n  }\n\n  for (let row = 0; row < TABLE_SIZE; row++) {\n    for (let col = 0; col < 4; col++) {\n      gameCells[row][col] = null;\n    }\n  }\n}\n\nfunction clearValues() {\n  for (let row = 0; row < TABLE_SIZE; row++) {\n    for (let col = 0; col < 4; col++) {\n      gameState[row][col] = 0;\n      cells[row * TABLE_SIZE + col].textContent = '';\n      removeAllClassesExceptMain(cells[row * TABLE_SIZE + col], 'field-cell');\n    }\n  }\n}\n\nfunction updateMaxScore(scores) {\n  const currentMaxScore = localStorage.getItem('maxScore');\n\n  if (currentMaxScore === null || scores > parseInt(currentMaxScore)) {\n    localStorage.setItem('maxScore', scores);\n    maxScoreBoard.textContent = scores;\n  }\n}\n\nclass MovableCell {\n  constructor(x, y) {\n    const cell = document.createElement('td');\n\n    cell.classList.add('movable-cell');\n    movableRow.append(cell);\n    this.cell = cell;\n    this.x = x;\n    this.y = y;\n    this.cell.style.setProperty('--x', x);\n    this.cell.style.setProperty('--y', y);\n    this.cell.style.setProperty('top', 'calc(var(--x) * 75px + 10px + var(--x) * 10px)');\n    this.cell.style.setProperty('left', 'calc(var(--y) * 75px + 10px + var(--y) * 10px)');\n\n    this.cell.addEventListener('animationend', function() {\n      cell.classList.remove('merged');\n    });\n  }\n\n  setCoordinates(x, y) {\n    this.cell.style.setProperty('--x', x);\n    this.cell.style.setProperty('--y', y);\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.cell.textContent = value;\n    removeAllClassesExceptMain(this.cell, 'movable-cell');\n    this.cell.classList.add(`movable-cell--${this.value}`);\n  }\n}\n\nfunction movesRemain() {\n  for (let row = TABLE_SIZE - 1; row > 0; row--) {\n    for (let col = 0; col < TABLE_SIZE; col++) {\n      const currentCell = gameState[row][col];\n      const nextCell = gameState[row - 1][col];\n\n      if (currentCell === nextCell && currentCell && nextCell) {\n        return true;\n      }\n    }\n  }\n\n  for (let row = 0; row < TABLE_SIZE - 1; row++) {\n    for (let col = 0; col < TABLE_SIZE; col++) {\n      const currentCell = gameState[row][col];\n      const nextCell = gameState[row + 1][col];\n\n      if (currentCell === nextCell && currentCell && nextCell) {\n        return true;\n      }\n    }\n  }\n\n  for (let row = 0; row < TABLE_SIZE; row++) {\n    for (let col = TABLE_SIZE - 1; col > 0; col--) {\n      const currentCell = gameState[row][col];\n      const nextCell = gameState[row][col - 1];\n\n      if (currentCell === nextCell && currentCell && nextCell) {\n        return true;\n      }\n    }\n  }\n\n  for (let row = 0; row < TABLE_SIZE; row++) {\n    for (let col = 0; col < TABLE_SIZE - 1; col++) {\n      const currentCell = gameState[row][col];\n      const nextCell = gameState[row][col + 1];\n\n      if (currentCell === nextCell && currentCell && nextCell) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction addRandomPlate() {\n  const emptyCells = [];\n\n  // Знаходимо порожні клітинки\n  for (let row = 0; row < TABLE_SIZE; row++) {\n    for (let col = 0; col < TABLE_SIZE; col++) {\n      if (gameState[row][col] === 0) {\n        emptyCells.push(\n          {\n            row,\n            col,\n          });\n      }\n    }\n  }\n\n  if (emptyCells.length > 0) {\n    const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    const randomValue = Math.random() < PERCENT_FOR_4\n      ? SECONDATY_START_VALUE\n      : MAIN_START_VALUE;\n\n    gameState[randomCell.row][randomCell.col] = randomValue;\n\n    const newCell = new MovableCell(randomCell.row, randomCell.col);\n\n    newCell.setValue(randomValue);\n\n    gameCells[randomCell.row][randomCell.col] = newCell;\n\n    if (!movesRemain() && emptyCells.length === 1) {\n      gameOver();\n    }\n  }\n}\n\nfunction removeAllClassesExceptMain(element, classNameToKeep) {\n  const classList = element.classList;\n  const classesToRemove = Array.from(classList).filter(className => className !== classNameToKeep);\n\n  classesToRemove.forEach(className => classList.remove(className));\n}\n\nfunction startGame() {\n  score = 0;\n  scoreBoard.textContent = score;\n  gameIsActive = true;\n\n  startButton.textContent = 'Restart';\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n\n  messageStart.classList.add('hidden');\n\n  if (!messageWin.classList.contains('hidden')) {\n    messageWin.classList.add('hidden');\n  }\n\n  if (!messageLose.classList.contains('hidden')) {\n    messageLose.classList.add('hidden');\n  }\n\n  clearField();\n\n  clearValues();\n\n  addRandomPlate();\n  addRandomPlate();\n}\n\nfunction gameOver() {\n  gameIsActive = false;\n\n  messageLose.classList.remove('hidden');\n  updateMaxScore(score);\n}\n\nfunction gameWinner() {\n  gameIsActive = false;\n\n  messageWin.classList.remove('hidden');\n  updateMaxScore(score);\n}\n\nstartButton.addEventListener('click', startGame);\n\nfunction mergeCells(row1, col1, row2, col2) {\n  gameState[row2][col2] *= 2;\n  gameState[row1][col1] = 0;\n\n  gameCells[row1][col1].setCoordinates(row2, col2);\n\n  // setTimeout(() => {\n  //   gameCells[row2][col2].setValue(gameState[row2][col2]);\n  //   gameCells[row1][col1].cell.remove();\n  //   gameCells[row1][col1] = null;\n  // }, 100);\n\n  const currentCell = gameCells[row1][col1];\n\n  gameCells[row2][col2].cell.remove();\n\n  gameCells[row1][col1] = null;\n  gameCells[row2][col2] = currentCell;\n  gameCells[row2][col2].cell.classList.add('merged');\n  gameCells[row2][col2].setValue(gameState[row2][col2]);\n\n  score += gameState[row2][col2];\n  scoreBoard.textContent = score;\n\n  if (gameState[row2][col2] === VALUE_TO_WIN) {\n    return gameWinner();\n  }\n}\n\nfunction moveUp() {\n  const isMerged = {};\n  let changes = false;\n\n  changes = moveCellsUp();\n\n  moveCellsUp();\n\n  for (let row = 1; row < TABLE_SIZE; row++) {\n    for (let col = 0; col < TABLE_SIZE; col++) {\n      const currentCell = gameState[row][col];\n\n      if (isMerged[`${row}-${col}`] || !currentCell) {\n        continue;\n      }\n\n      const nextCell = gameState[row - 1][col];\n\n      if (currentCell === nextCell && currentCell && nextCell) {\n        mergeCells(row, col, row - 1, col);\n        isMerged[`${row - 1}-${col}`] = true;\n        changes = true;\n      }\n    }\n  }\n\n  moveCellsUp();\n\n  return changes;\n}\n\nfunction moveCellsUp() {\n  let changes = false;\n\n  for (let row = 1; row < TABLE_SIZE; row++) {\n    for (let col = 0; col < TABLE_SIZE; col++) {\n      const currentCell = gameState[row][col];\n      const nextCell = gameState[row - 1][col];\n\n      if (currentCell && !nextCell) {\n        moveCellUp(row, col);\n        changes = true;\n      }\n    }\n  }\n\n  return changes;\n}\n\nfunction moveCellUp(row, col) {\n  gameState[row - 1][col] = gameState[row][col];\n  gameState[row][col] = 0;\n\n  const previousPlate = gameCells[row][col];\n\n  gameCells[row][col].setCoordinates(row - 1, col);\n  gameCells[row][col] = null;\n\n  gameCells[row - 1][col] = previousPlate;\n}\n\nfunction moveDown() {\n  const isMerged = {};\n  let changes = false;\n\n  changes = moveCellsDown();\n\n  moveCellsDown();\n\n  for (let row = TABLE_SIZE - 1; row > 0; row--) {\n    for (let col = 0; col < TABLE_SIZE; col++) {\n      const currentCell = gameState[row][col];\n\n      if (isMerged[`${row}-${col}`] || !currentCell) {\n        continue;\n      }\n\n      const nextCell = gameState[row - 1][col];\n\n      if (currentCell === nextCell && currentCell && nextCell) {\n        mergeCells(row - 1, col, row, col);\n        isMerged[`${row - 1}-${col}`] = true;\n        changes = true;\n      }\n    }\n  }\n\n  moveCellsDown();\n\n  return changes;\n}\n\nfunction moveCellsDown() {\n  let changes = false;\n\n  for (let row = TABLE_SIZE - 2; row >= 0; row--) {\n    for (let col = 0; col < TABLE_SIZE; col++) {\n      const currentCell = gameState[row][col];\n      const nextCell = gameState[row + 1][col];\n\n      if (currentCell && !nextCell) {\n        moveCellDown(row, col);\n        changes = true;\n      }\n    }\n  }\n\n  return changes;\n}\n\nfunction moveCellDown(row, col) {\n  gameState[row + 1][col] = gameState[row][col];\n  gameState[row][col] = 0;\n\n  const previousPlate = gameCells[row][col];\n\n  gameCells[row][col].setCoordinates(row + 1, col);\n  gameCells[row][col] = null;\n\n  gameCells[row + 1][col] = previousPlate;\n}\n\nfunction moveRight() {\n  const isMerged = {};\n  let changes = false;\n\n  changes = moveCellsRight();\n\n  moveCellsRight();\n\n  for (let row = 0; row < TABLE_SIZE; row++) {\n    for (let col = TABLE_SIZE - 2; col >= 0; col--) {\n      const currentCell = gameState[row][col];\n      const nextCell = gameState[row][col + 1];\n\n      if (isMerged[`${row}-${col}`]) {\n        continue;\n      }\n\n      if (currentCell === nextCell && currentCell && nextCell) {\n        mergeCells(row, col, row, col + 1);\n        isMerged[`${row}-${col + 1}`] = true;\n        changes = true;\n      }\n    }\n  }\n\n  moveCellsRight();\n\n  return changes;\n}\n\nfunction moveCellsRight() {\n  let changes = false;\n\n  for (let row = 0; row < TABLE_SIZE; row++) {\n    for (let col = TABLE_SIZE - 2; col >= 0; col--) {\n      const currentCell = gameState[row][col];\n      const nextCell = gameState[row][col + 1];\n\n      if (currentCell && !nextCell) {\n        moveCellRight(row, col);\n        changes = true;\n      }\n    }\n  }\n\n  return changes;\n}\n\nfunction moveCellRight(row, col) {\n  gameState[row][col + 1] = gameState[row][col];\n  gameState[row][col] = 0;\n\n  gameCells[row][col + 1] = gameCells[row][col];\n  gameCells[row][col].setCoordinates(row, col + 1);\n\n  gameCells[row][col] = null;\n}\n\nfunction moveLeft() {\n  const isMerged = {};\n  let changes = false;\n\n  changes = moveCellsLeft();\n\n  moveCellsLeft();\n\n  for (let row = 0; row < TABLE_SIZE; row++) {\n    for (let col = 1; col < TABLE_SIZE; col++) {\n      const currentCell = gameState[row][col];\n      const nextCell = gameState[row][col - 1];\n\n      if (isMerged[`${row}-${col}`]) {\n        continue;\n      }\n\n      if (currentCell === nextCell && currentCell && nextCell) {\n        mergeCells(row, col, row, col - 1);\n        isMerged[`${row}-${col - 1}`] = true;\n        changes = true;\n      }\n    }\n  }\n\n  moveCellsLeft();\n\n  return changes;\n}\n\nfunction moveCellsLeft() {\n  let changes = false;\n\n  for (let row = 0; row < TABLE_SIZE; row++) {\n    for (let col = 1; col < TABLE_SIZE; col++) {\n      const currentCell = gameState[row][col];\n      const nextCell = gameState[row][col - 1];\n\n      if (currentCell && !nextCell) {\n        moveCellLeft(row, col);\n        changes = true;\n      }\n    }\n  }\n\n  return changes;\n}\n\nfunction moveCellLeft(row, col) {\n  gameState[row][col - 1] = gameState[row][col];\n  gameState[row][col] = 0;\n\n  gameCells[row][col - 1] = gameCells[row][col];\n  gameCells[row][col].setCoordinates(row, col - 1);\n\n  gameCells[row][col] = null;\n}\n\ndocument.addEventListener('keydown', key => {\n  if (gameIsActive === true) {\n    let change = false;\n\n    switch (key.key) {\n      case 'ArrowUp':\n        change = moveUp();\n        break;\n\n      case 'ArrowDown':\n        change = moveDown();\n        break;\n\n      case 'ArrowRight':\n        change = moveRight();\n        break;\n\n      case 'ArrowLeft':\n        change = moveLeft();\n        break;\n    }\n\n    setTimeout(() => {\n      if (change) {\n        addRandomPlate();\n      }\n    }, 100);\n  }\n});\n\nlet startX;\nlet startY;\n\ndocument.addEventListener('touchstart', touchStartHandler, { passive: false });\n\nfunction touchStartHandler(e) {\n  if (gameIsActive === true) {\n    startX = e.touches[0].clientX;\n    startY = e.touches[0].clientY;\n  }\n}\n\ndocument.addEventListener('touchend', touchEndHandler, { passive: false });\n\nfunction touchEndHandler(e) {\n  if (!e.target.classList.contains('no-swipe')) {\n    e.preventDefault(); // Запобігаємо стандартному дії браузера при торканні\n  } else {\n    return;\n  }\n\n  if (gameIsActive === true) {\n    const endX = e.changedTouches[0].clientX;\n    const endY = e.changedTouches[0].clientY;\n\n    const deltaX = endX - startX;\n    const deltaY = endY - startY;\n\n    let change = false;\n\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n      if (deltaX > 0) {\n        // Swipe right\n        change = moveRight();\n      } else {\n        // Swipe left\n        change = moveLeft();\n      }\n    } else {\n      if (deltaY > 0) {\n        // Swipe down\n        change = moveDown();\n      } else {\n        // Swipe up\n        change = moveUp();\n      }\n    }\n\n    if (change) {\n      setTimeout(() => {\n        addRandomPlate();\n      }, 100);\n    }\n  }\n}\n"]}